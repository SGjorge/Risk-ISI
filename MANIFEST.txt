El objetivo de este fichero es mantener un guión con las pautas de programación a seguir, además de mantener un listado de los elementos comunes de la práctica.

	1.- Pautas de implementación:
		Constantes globales --> Mayúsculas: EJEMPLOUNO
		Variables --> Capitalización de camello: ejemploUno
		Objetos --> Minúscula con separación por barra baja: ejemplo_uno
		Clases --> Capitalización de camello con la inicial en mayúsculas: EjemploUno
		Métodos --> Todo en minúsculas: metodouno
		Test --> formato 'test_nombredeltest'.

A continuación se listarán las constantes globales, objetos, clases y métodos, con el fin de evitar conflictos a la hora de combinar las ramas.

TEST
	ClassTest.py --> Test que implementa el testeo de las clases.
	PlayersTest.py --> Test que implementa el testeo de la clase Players
	ClassTest --> Test que implementa el testeo de las clases.
	BoardTest --> Tests para la implementación del talero.
	GameRulesTest --> Test para la implementación de las reglas generales del juego.
CLASES PRINCIPALES
	CoreVariables. --> Clase que lleva todas las variables "absolutas" que se usarán en todas las demás clases.
										*Los nombres de los países van en mayúsculas solo las letras que forman el nombre. Es decir,
										si es 'algo' del norte/occidental etc, sólo va en mayúscula la letra del país, pero si es
										'Nueva Guinea', las dos llevan mayúsculas.

			InitialBattalions --> Tabla que implementa lo necesario sobre los batallones
			al comienzo del juego.
			ReinforcementBattalionsPerContinent --> Tabla que implementa lo necesario sobre
			los refuerzos que se añaden a cada pasada del juego, según los continentes enteros ocupados.

	Round --> Clase principal sobre la que se irán implementando los diferentes métodos llamados desde el main(),
	representa a la partida, derivarán Countries y Players.
		Countries --> Clase abstracta con los métodos en vacío que tendrán las clases hijas.
			Country --> Clase hija de Countries que implementa lo necesario de países.
			Vecinos --> Clase hija de Countries que lleva un array de vecinos.
		Players --> Clase abstracta que denota lo necesario para los jugadores. Actúa como interfaz.
			HumanPlayer --> Clase derivada de Players que implementa lo necesario del jugador humano.
			IAPlayer --> Clase derivada de Players que implementa lo necesario del jugador de inteligencia artificial.
			ArrayPlayers --> Implementa el manejo de arrays de jugares
	GamesRules --> Clase principal sobre las reglas y necesidades del juego.De aquí derivarán Cards y Tables.
			ArrayPlayer --> Clase para el manejo de array de jugadores
	GamesRules --> Clase principal sobre las reglas y necesidades del juego. De aquí derivarán Cards y Tables.
		Cards --> Clase abstracta que denota lo necesario sobre las cartas del juego.
			InfantryCard --> Clase derivada que implementa lo necesario de la carta de infantería.
			ArtilleryCard --> Clase derivada que implementa lo necesario de la carta de artillería.
			CavalryCard --> Clase derivada que implementa lo necesario de la carta de caballería.
		
	


MÉTODOS
	main() --> método principal del proyecto, no recibe parametros de entrada ni salida.
